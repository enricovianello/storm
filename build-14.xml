<?xml version="1.0" encoding="UTF-8"?>
<project name="StoRM" default="build" basedir=".">
  <description>    &quot;StoRM backend&quot; component of the StoRM project.
    $Author: rzappi $
    $Date: 2007/04/18 10:45:04 $
    $Revision: 1.21 $
    $Id: build-14.xml,v 1.21 2007/04/18 10:45:04 rzappi Exp $
  </description>

  <!-- =================================================================== -->
  <!-- PRINT USAGE INFORMATION                                             -->
  <!-- =================================================================== -->
  <target name="help" description="Display help about ant targets">
    <echo message="-----------------------------------------------------------------"/>
    <echo message="This is StoRM-BE version ${version}.                             "/>
    <echo message="-----------------------------------------------------------------"/>
    <echo message="   Target        |     Description"/>
    <echo message="-----------------------------------------------------------------"/>
    <echo message="clean               Removes build directory"/>
    <echo message="build               Build BE "/>
    <echo message="package             Make the package of BE (JARs and external libraries)"/>
    <echo message="install             Install StoRM BE in the directory ${install.basepath}"/>
  </target>

   <tstamp>
       <format property="_tmpstamp" pattern="yyyy/MM/dd-hh:mm:ss" locale="en"/>
   </tstamp>

  <!-- ################################################################## -->
  <!-- ################## Property definitions ########################## -->
  <!-- ################################################################## -->
  <!--                                                                 -->
  <!-- N.B.: once a property has been set, it will not be overwritten. -->
  <!-- Therefore, default values for properties go last, and user      -->
  <!-- overrides go first.                                             -->
  <!--                                                                 -->

  <!-- ========== Initialize Properties ===================================== -->
  <!-- load environment vars under the env.* property hierarchy -->
  <property environment="env"/>
  <!-- load all properties from "build.properties" file -->
  <property file="build-14.properties"/>

  <!-- Import classpath properties -->
  <import file="./classpath.xml" />

  <!-- native code libs; needed at runtime -->
  <fileset id="src.lib" dir="${build.libs.dir}">
    <include name="*.so"/>
  </fileset>

  <!-- config files; needed at runtime -->
  <fileset id="src.config" dir="${src.config.dir}">
    <include name="*.properties"/>
    <include name="namespace.xml"/>
    <include name="namespace.xsd"/>
    <include name="lcmaps.db"/>
    <include name="*.template"/>
    <include name="sysconfig/storm-backend"/>
    <include name="logrotate.d/storm-backend"/>
  </fileset>

  <!-- start/stop scripts -->
  <fileset id="src.sysvinit" dir="${src.sysvinit.dir}">
    <include name="storm-backend"/>
  </fileset>

  <!-- configuration script -->
  <fileset id="src.sbin" dir="${src.sbin.dir}">
    <include name="storm-backend-configure"/>
  </fileset>

  <!-- documentation and licenses -->
  <fileset id="src.docs.proper"    dir="${src.doc.dir}"/>
  <fileset id="src.docs.license"   dir="${src.dir}"  includes="LICENSE.txt"/>
  <fileset id="src.docs.3rdparty.licenses"  dir="${src.dir}">
    <include name="ACKNOWLEDGEMENTS.txt"/>
    <include name="lib/*.LICENSE"/>
  </fileset>

    <!-- =============================================================== -->
    <!-- BUILD/COMPILE TARGETS                                           -->
    <!-- =============================================================== -->
    <!-- Prepare directories and properties for compile/build tasks to run -->
    <target name="init">
      <echo message="----------------------------------------------"/>
      <echo message="---     JAR SET version = ${jars-set-version} "/>
      <echo message="----------------------------------------------"/>
      <!-- sets the standard DSTAMP, TSTAMP, and TODAY properties -->
      <tstamp/>
      <!-- Create the build directory structure used by compile -->
      <mkdir dir="${build.dir}"/>
      <mkdir dir="${build.classes.dir}"/>
      <mkdir dir="${build.libs.dir}"/>
      <mkdir dir="${build.jars.dir}"/>
    </target>


    <!-- ================================================================ -->
    <!-- Compile native library : filesystem driver  and LCMAPS binding   -->
    <!-- ================================================================ -->

    <!-- preprocess source files -->
    <target name="native-preprocess">
      <!--
        it's faster to rebuild this file each time than checking for
        up-to-date-ness...
      -->
      <exec executable="cpp" input="${src.java.dir}/it/grid/storm/authorization/sources/CompositeAuthorizationSource.jappo" output="${src.java.dir}/it/grid/storm/authorization/sources/CompositeAuthorizationSource.java" logError="true">
        <arg line="-P -C"/>
      </exec>
    </target>

    <!-- make SWIG Java interfaces -->
    <target name="swig" depends="swig.lcmaps,swig.filesystem"/>

    <target name="swig.lcmaps" depends="init">
      <exec executable="make" logError="true">
        <arg value="DESTDIR=${build.libs.dir}"/>
        <arg line="-C ${src.java.dir}/it/grid/storm/griduser/swig"/>
        <arg line="swig"/>
      </exec>
    </target>

    <target name="swig.filesystem" depends="init">
      <exec executable="make" logError="true">
        <arg value="DESTDIR=${build.libs.dir}"/>
        <arg line="-C ${src.java.dir}/it/grid/storm/filesystem/swig"/>
        <arg line="fs_acl.java genericfs.java"/>
      </exec>
    </target>

    <!-- Filestem classes -->
    <target name="libs.filesystem" depends="init,swig.filesystem">
      <exec executable="make" dir="${src.java.dir}/it/grid/storm/filesystem/swig" failonerror="true" logError="true">
        <arg value="DESTDIR=${build.libs.dir}"/>
      </exec>
    </target>

    <!-- make wrapper component native libs -->
    <target name="libs.wrapper" depends="init">
      <condition property="libs.wrapper.debug" value="1">
        <istrue value="${build.debug}"/>
      </condition>
      <condition property="libs.wrapper.gpfs" value="1">
        <istrue value="${build.gpfs}"/>
      </condition>
      <condition property="libs.wrapper.lustre" value="lustre">
        <istrue value="${build.lustre}"/>
      </condition>
      <exec executable="make" dir="${src.java.dir}/it/grid/storm/wrapper" failonerror="true" logError="true">
        <arg value="BUILDDIR=${build.libs.dir}"/>
        <arg value="DEBUG=${libs.wrapper.debug}"/>
        <arg value="destdir=${build.libs.dir}"/>
        <arg value="FILESYSTEMS=posix gpfs xfs"/>
        <!-- ${libs.wrapper.gpfs} ${libs.wrapper.lustre}" -->
        <arg value="all"/>
        <arg value="alllib"/>
      </exec>
    </target>

    <target name="libs.lcmaps" depends="init,swig.lcmaps">
      <exec executable="make" dir="${src.java.dir}/it/grid/storm/griduser/swig" failonerror="true" logError="true">
        <arg value="DESTDIR=${build.libs.dir}"/>
        <arg value="${build.libs.dir}/liblcmaps_interface.so"/>
      </exec>
    </target>

    <target name="native-libs" description="compile native code libs" depends="libs.lcmaps,libs.filesystem"/>

    <target name="precompile" depends="init,native-preprocess,swig"/>


    <!-- ======================================================= -->
    <!-- JAVA Compile                                            -->
    <!-- ======================================================= -->

    <target name="create-lib-jars" depends="refresh-local-repository, init-lib-jars">
      <echo message="Local repository : ${external-jars.local-repository.path}"/>
      <echo message="Directory used as archive of JAR to build StoRM BE : ${build.jars.dir}"/>
      <copy  todir="${build.jars.dir}" verbose="true" flatten="true" overwrite="false" preservelastmodified="true">
        <fileset refid="external-jars"/>
      </copy>
    </target>

    <target name="set-classpath" description="Build set of jars and set up the right classpath" depends="create-lib-jars"/>

    <target name="javac" description="Compile the .java source files" depends="precompile, set-classpath">
      <javac srcdir="${src.java.dir}"
             destdir="${build.classes.dir}"
             debug="${compile.debug}"
             deprecation="${compile.deprecation}"
             source="${compile.source}"
             target="${compile.target}">
        <classpath refid="compile.classpath"/>
        <include name="it/grid/storm/**"/>
        <exclude name="it/grid/storm/namespace/admin/**"/>
      </javac>
    </target>

    <!-- 'compile' is an alias for 'javac' -->
    <target name="compile" depends="javac"/>

    <target name="build"
            description="Compile *all* StoRM BE code"
            depends="native-libs,javac,package"/>

    <!-- ===================================================== -->
    <!-- PACKAGING                                             -->
    <!-- ===================================================== -->

    <target name="package" description="Make the ${dist.jar.filename} file out of compiled Java classes" depends="javac">
      <jar destfile="${build.dir}/${dist.jar}"
           basedir="${build.classes.dir}"
           includes="it/grid/storm/**"
           index="true">
      </jar>
    </target>


    <!-- =============================================================== -->
    <!-- CLEAN                                                           -->
    <!-- =============================================================== -->

    <!-- Invoke 'clean' target on it/grid/storm/wrapper Makefile -->
    <target name="clean.libs.wrapper">
      <exec executable="make" dir="${src.java.dir}/it/grid/storm/wrapper" logError="true">
        <arg value="BUILDDIR=${build.libs.dir}"/>
        <arg value="clean"/>
      </exec>
    </target>

    <!-- Invoke 'clean' target on it/grid/storm/grid/swig/Makefile -->
    <target name="clean.swig.lcmaps">
      <exec executable="make" dir="${src.java.dir}/it/grid/storm/griduser/swig" logError="true">
        <arg value="DESTDIR=${build.libs.dir}"/>
        <arg value="extraclean"/>
      </exec>
    </target>

    <!-- Invoke 'clean' target on it/grid/storm/filesystem/swig/Makefile -->
    <target name="clean.swig.filesystem">
      <exec executable="make" dir="${src.java.dir}/it/grid/storm/filesystem/swig" logError="true">
        <arg value="DESTDIR=${build.libs.dir}"/>
        <arg value="extraclean"/>
      </exec>
    </target>

    <target name="clean" description="Remove build tree and all of the intermediate build files"
            depends="clean.libs.wrapper,clean.swig.lcmaps,clean.swig.filesystem,rmdir-libs">
      <!-- Delete the ${build.dir} directory tree -->
      <delete dir="${build.dir}"/>
    </target>

    <target name="clean-build-jar-dir" description="Remove build jar dir">
      <!-- Delete the "${build.jars.dir}" -->
      <delete dir="${build.jars.dir}"/>
    </target>

    <target name="clean-local-repository" description="Remove local repository of JAR">
      <!-- Delete the ${external-jars.local-repository.path} -->
      <delete dir="${external-jars.local-repository.path}"/>
    </target>

    <target name="clean-jar-set" description="Remove JAR set of version ${jars-set-version}" depends="clean-build-jar-dir,clean-local-repository">
      <!-- Delete the ${external-jars.local-repository.path} -->
      <delete dir="${external-jars.local-repository.path}"/>
    </target>

    <!-- =============================================================== -->
    <!-- INSTALL                                                         -->
    <!-- =============================================================== -->
    <target name="install" description="Copy built and distributed files to a deployable tree structure under ${prefix}"
            depends="install.nojars,install.jarsonly"/>

    <target name="install.nojars"
            description="Copy built files (except 3rd-party .jar's) to a deployable tree structure under ${prefix}"
            depends="package">
      <!-- Create the distribution directory hierarchy -->
      <mkdir dir="${bindir}"/>
      <mkdir dir="${datadir}"/>
      <mkdir dir="${docdir}"/>
      <mkdir dir="${logdir}"/>
      <mkdir dir="${prefix}"/>
      <mkdir dir="${sbindir}"/>
      <mkdir dir="${sysconfdir}"/>
      <mkdir dir="${sysvinitdir}"/>
      <mkdir dir="${tmpdir}"/>
      <!-- copy files -->
      <copy file="${build.dir}/${dist.jar.filename}" tofile="${libdir}/${dist.jar.filename}" overwrite="true"/>
      <copy todir="${sysconfdir}" flatten="false" overwrite="true">
        <fileset refid="src.config"/>
      </copy>
      <copy todir="${sysvinitdir}" flatten="true" overwrite="true">
        <fileset refid="src.sysvinit"/>
      </copy>
      <copy todir="${sbindir}" flatten="false" overwrite="true">
        <fileset refid="src.sbin"/>
      </copy>
      <copy todir="${libdir}" flatten="true" overwrite="true">
        <fileset refid="src.lib"/>
      </copy>
      <copy todir="${docdir}" overwrite="true">
        <fileset refid="src.docs.proper"/>
        <fileset refid="src.docs.license"/>
      </copy>
      <!-- fix permissions -->
      <chmod perm="0755" type="dir">
        <!-- this is necessary if umask != 022 -->
        <dirset id="dist.dirs" dir="${prefix}/"/>
      </chmod>
      <chmod perm="0644" type="file">
        <!-- this is necessary if umask != 022 -->
        <fileset id="dist.files" dir="${prefix}/"/>
      </chmod>
      <chmod perm="0755" type="file">
        <fileset id="dist.bin" dir="${prefix}">
          <!-- set executable bit for binaries and scripts -->
          <include name="bin/*"/>
          <include name="sbin/*"/>
          <include name="etc/init.d/*"/>
        </fileset>
      </chmod>
      <chmod perm="1755" type="dir" dir="${tmpdir}"/>
    </target>

    <target name="install.jarsonly" description="Copy 3rd-party jar files to directory ${jardir}">
      <!-- Create the distribution directory hierarchy -->
      <mkdir dir="${docdir}"/>
      <mkdir dir="${jardir}"/>
      <!-- copy files -->
      <copy todir="${jardir}" flatten="true" overwrite="true">
        <fileset refid="dist.jars"/>
      </copy>
      <copy todir="${docdir}" flatten="true" overwrite="true">
        <fileset refid="src.docs.3rdparty.licenses"/>
      </copy>
    </target>

</project>
