#!/bin/bash

#
# Used kB
#
function get_used_size_kb () {

  # Quota on
  if ! [ `echo $@ | wc -w` = 2 ] && [ "$3" == "true" ]; then
    gpfs_quota_cmd="/usr/lpp/mmfs/bin/mmlsquota"
    if ! [ -z "$4" ] && ! [ -z "$5" ]; then
      used=`${gpfs_quota_cmd} -j $4 $5 | awk 'NR==3 {print $3}' | sed 's/\..*//'`
      if [ -z ${used} ]; then
        echo "ERROR: ${gpfs_quota_cmd} return no value; check GPFS partition." 
        exit 1
      fi
      # convert in kB (base 10)
      used=$((${used}*1024/1000))
    else
      # Missing fileset, device or both
      used=-1
    fi
  # Quota off
  else
    # Get values from the storm_be_ISAM database
    total=`echo "SELECT total_size FROM storage_space WHERE space_file='$1' ;" | mysql --user=${STORM_USER} --password=${STORM_DB_PWD} -N storm_be_ISAM`   # in B
    free=`echo "SELECT free_size FROM storage_space WHERE space_file='$1' ;" | mysql --user=${STORM_USER} --password=${STORM_DB_PWD} -N storm_be_ISAM`   # in B
    if [ ! -z "${free}" ] && [ ! -z "${total}" ]; then
      used=$((${total}-${free}))
      # convert in kB (base 10)
      used=$((${used}/1000))
    else
      # Missing sizes
      used=-1
    fi
  fi

  export $2=${used}

  return 0

}

#
# Used GB
#
function get_used_size_gb () {

  # Quota on
  if ! [ `echo $@ | wc -w` = 2 ] && [ "$3" == "true" ]; then
    gpfs_quota_cmd="/usr/lpp/mmfs/bin/mmlsquota"
    if ! [ -z "$4" ] && ! [ -z "$5" ]; then
      used=`${gpfs_quota_cmd} -j $4 $5 | awk 'NR==3 {print $3}' | sed 's/\..*//'`
      if [ -z ${used} ]; then
        echo "ERROR: ${gpfs_quota_cmd} return no value; check GPFS partition." 
        exit 1
      fi
      # convert in GB (base 10)
      used=$((${used}*1024/(1000*1000*1000)))
    else
      # Missing fileset or device or both
      used=-1
    fi
  # Quota off
  else
    # Get values from the storm_be_ISAM database
    total=`echo "SELECT total_size FROM storage_space WHERE space_file='$1' ;" | mysql --user=${STORM_USER} --password=${STORM_DB_PWD} -N storm_be_ISAM`   # in B
    free=`echo "SELECT free_size FROM storage_space WHERE space_file='$1' ;" | mysql --user=${STORM_USER} --password=${STORM_DB_PWD} -N storm_be_ISAM`   # in B
    if [ ! -z "${free}" ] && [ ! -z "${total}" ]; then
      used=$((${total}-${free}))
      # convert in GB (base 10)
      used=$((${used}/(1000*1000*1000)))
    else
      # Missing sizes
      used=-1
    fi
  fi

  export $2=${used}

  return 0

}

#
# Free kB
#
function get_free_size_kb () {

  # Quota on
  if ! [ `echo $@ | wc -w` = 2 ] && [ "$3" == "true" ]; then
    gpfs_quota_cmd="/usr/lpp/mmfs/bin/mmlsquota"
    if ! [ -z "$4" ] && ! [ -z "$5" ]; then
      total=`${gpfs_quota_cmd} -j $4 $5 | awk 'NR==3 {printf $4}' | sed 's/\..*//'`
      used=`${gpfs_quota_cmd} -j $4 $5 | awk 'NR==3 {printf $3}' | sed 's/\..*//'`
      if [ -z ${total} ] || [ -z ${used} ]; then
        echo "ERROR: ${gpfs_quota_cmd} return no value; check GPFS partition." 
        exit 1
      fi
      free=$((${total}-${used}))
      # convert in kB (base 10)
      free=$((${free}*1024/1000))
    else
      # Missing fileset or device or both
      free=-1
    fi
  # Quota off
  else
    # Get values from the storm_be_ISAM database
    free=`echo "SELECT free_size FROM storage_space WHERE space_file='$1' ;" | mysql --user=${STORM_USER} --password=${STORM_DB_PWD} -N storm_be_ISAM`   # in B
    if [ ! -z "${free}" ]; then
      # convert in kB (base 10)
      free=$((${free}/1000))
    else
      # Missing sizes
      free=-1
    fi
  fi

  export $2=${free}

  return 0

}

#
# Free GB
#
function get_free_size_gb () {

  # Quota on
  if ! [ `echo $@ | wc -w` = 2 ] && [ "$3" == "true" ]; then
    gpfs_quota_cmd="/usr/lpp/mmfs/bin/mmlsquota"
    if ! [ -z "$4" ] && ! [ -z "$5" ]; then
      total=`${gpfs_quota_cmd} -j $4 $5 | awk 'NR==3 {printf $4}' | sed 's/\..*//'`
      used=`${gpfs_quota_cmd} -j $4 $5 | awk 'NR==3 {printf $3}' | sed 's/\..*//'`
      if [ -z ${total} ] || [ -z ${used} ]; then
        echo "ERROR: ${gpfs_quota_cmd} return no value; check GPFS partition." 
        exit 1
      fi
      free=$((${total}-${used}))
      # convert in GB (base 10)
      free=$((${free}*1024/(1000*1000*1000)))
    else
      # Missing fileset or device or both
      free=-1
    fi
  # Quota off
  else
    # Get values from the storm_be_ISAM database
    free=`echo "SELECT free_size from storage_space WHERE space_file='$1' ;" | mysql --user=${STORM_USER} --password=${STORM_DB_PWD} -N storm_be_ISAM`   # in B
    if [ ! -z "${free}" ]; then
      # convert in GB (base 10)
      free=$((${free}/(1000*1000*1000)))
    else
      # Missing sizes
      free=-1
    fi
  fi

  export $2=${free}

  return 0

}

#
# Total kB
#
function get_total_size_kb () {

  # Quota on
  if ! [ `echo $@ | wc -w` = 2 ] && [ "$3" == "true" ]; then
    gpfs_quota_cmd="/usr/lpp/mmfs/bin/mmlsquota"
    if ! [ -z "$4" ] && ! [ -z "$5" ]; then
      total=`${gpfs_quota_cmd} -j $4 $5 | awk 'NR==3 {printf $4}' | sed 's/\..*//'`
      if [ -z ${total} ]; then
        echo "ERROR: ${gpfs_quota_cmd} return no value; check GPFS partition." 
        exit 1
      fi
      # convert in kB (base 10)
      total=$((${total}*1024/1000))
    else
      # Missing fileset or device or both
      total=-1
    fi
  # Quota off
  else
    # Get values from the storm_be_ISAM database
    total=`echo "SELECT total_size FROM storage_space WHERE space_file='$1' ;" | mysql --user=${STORM_USER} --password=${STORM_DB_PWD} -N storm_be_ISAM`   # in B
    if [ ! -z "${total}" ]; then
      # convert in kB (base 10)
      total=$((${total}/1000))
    else
      # Missing sizes
      total=-1
    fi
  fi

  export $2=${total}

  return 0

}

#
# Total GB
#
function get_total_size_gb () {

  # Quota on
  if ! [ `echo $@ | wc -w` = 2 ] && [ "$3" == "true" ]; then
    gpfs_quota_cmd="/usr/lpp/mmfs/bin/mmlsquota"
    if ! [ -z "$4" ] && ! [ -z "$5" ]; then
      total=`${gpfs_quota_cmd} -j $4 $5 | awk 'NR==3 {printf $4}' | sed 's/\..*//'`
      if [ -z ${total} ]; then
        echo "ERROR: ${gpfs_quota_cmd} return no value; check GPFS partition." 
        exit 1
      fi
      # convert in GB (base 10)
      total=$((${total}*1024/(1000*1000*1000)))
    else
      # Missing fileset or device or both
      total=-1
    fi
  # Quota off
  else
    # Get values from the storm_be_ISAM database
    total=`echo "SELECT total_size FROM storage_space WHERE space_file='$1' ;" | mysql --user=${STORM_USER} --password=${STORM_DB_PWD} -N storm_be_ISAM`   # in B
    if [ ! -z "${total}" ]; then
      # convert in GB (base 10)
      total=$((${total}/(1000*1000*1000)))
    else
      # Missing sizes
      total=-1
    fi
  fi

  export $2=${total}

  return 0

}

###
### Main section
###

  # Source configuration file
  if [ $# = 1 ]; then
    source $1
  else
    exit 1
  fi

  # Source utils file
  UTIL=/opt/glite/yaim/functions/utils/manage_conf
  if [ -e ${UTIL} ]; then
    source ${UTIL}
  else
    exit 1
  fi

  FILE=`mktemp`

  # Prepare need variables
  for SA in ${STORM_STORAGEAREA_LIST}; do

    # Convert case
    SA_UPP=`echo ${SA} | tr '[:lower:]' '[:upper:]'`
    SA_LOW=`echo ${SA} | tr '[:upper:]' '[:lower:]'`

    # Remove DNS-like characters from SA_UPP names
    SA_UPP=`echo ${SA_UPP} | sed -e 's/-//g' -e 's/\.//g'`

    x=STORM_${SA_UPP}_ROOT;            ROOT=${!x:-${STORM_DEFAULT_ROOT}/${SA_LOW}}
    x=STORM_${SA_UPP}_VONAME;          VONAME=${!x:-${SA_LOW}}
    x=STORM_${SA_UPP}_QUOTA;           QUOTA=${!x}
    x=STORM_${SA_UPP}_QUOTA_FILESET;   FILESET=${!x}
    x=STORM_${SA_UPP}_QUOTA_DEVICE;    DEVICE=${!x}

    # Get size values on SA_ROOT (in GB)
    get_used_size_gb  ${ROOT} PARAMETER ${QUOTA} ${FILESET} ${DEVICE};   hash_insert SA_USED_SIZE_GB  ${SA_UPP} ${PARAMETER}
    get_free_size_gb  ${ROOT} PARAMETER ${QUOTA} ${FILESET} ${DEVICE};   hash_insert SA_FREE_SIZE_GB  ${SA_UPP} ${PARAMETER}
    get_total_size_gb ${ROOT} PARAMETER ${QUOTA} ${FILESET} ${DEVICE};   hash_insert SA_TOTAL_SIZE_GB ${SA_UPP} ${PARAMETER}
    # Get size values on SA_ROOT (in KB)
    get_used_size_kb  ${ROOT} PARAMETER ${QUOTA} ${FILESET} ${DEVICE};   hash_insert SA_USED_SIZE_KB  ${SA_UPP} ${PARAMETER}
    get_free_size_kb  ${ROOT} PARAMETER ${QUOTA} ${FILESET} ${DEVICE};   hash_insert SA_FREE_SIZE_KB  ${SA_UPP} ${PARAMETER}

    # Prepare per-VO and global values
    PERVO_VONAME_INDEX=`echo ${VONAME} | sed 's/\.//g'`
    # Add VONAME if missing
    if ! [[ "${PERVO_VONAMES}" =~ "${VONAME}" ]]; then
      PERVO_VONAMES="${PERVO_VONAMES} ${VONAME}"
      x=STORM_${SA_UPP}_ACCESSPOINT;   hash_insert PERVO_ACCESSPOINT ${PERVO_VONAME_INDEX} ${!x:-/${SA_LOW}}
    fi
    # Sum size values for VONAME and global(in GB)
    x=`hash_find PERVO_USED_SIZE_GB ${PERVO_VONAME_INDEX}`
    y=`hash_find SA_USED_SIZE_GB ${SA_UPP}`
    hash_insert PERVO_USED_SIZE_GB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_USED_SIZE_GB+=$y

    x=`hash_find PERVO_FREE_SIZE_GB ${PERVO_VONAME_INDEX}`
    y=`hash_find SA_FREE_SIZE_GB ${SA_UPP}`
    hash_insert PERVO_FREE_SIZE_GB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_FREE_SIZE_GB+=$y

    x=`hash_find PERVO_TOTAL_SIZE_GB ${PERVO_VONAME_INDEX}`
    y=`hash_find  SA_TOTAL_SIZE_GB ${SA_UPP}`
    hash_insert PERVO_TOTAL_SIZE_GB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_TOTAL_SIZE_GB+=$y

    # Sum size values for VONAME (in KB)
    x=`hash_find PERVO_USED_SIZE_KB ${PERVO_VONAME_INDEX}`
    y=`hash_find SA_USED_SIZE_KB ${SA_UPP}`
    hash_insert PERVO_USED_SIZE_KB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_USED_SIZE_KB+=$y

    x=`hash_find PERVO_FREE_SIZE_KB ${PERVO_VONAME_INDEX}`
    y=`hash_find SA_FREE_SIZE_KB ${SA_UPP}`
    hash_insert  PERVO_FREE_SIZE_KB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_FREE_SIZE_KB+=$y

  done

  #==========================================================
  # Create GlueSE entries

  cat >> ${FILE} << EOF
#
# GlueSE
#

dn: GlueSEUniqueID=${STORM_FRONTEND_PUBLIC_HOST},mds-vo-name=resource,o=grid
GlueSESizeTotal: ${GLOBAL_TOTAL_SIZE_GB}
GlueSESizeFree: ${GLOBAL_FREE_SIZE_GB}
GlueSETotalOnlineSize: ${GLOBAL_TOTAL_SIZE_GB}
GlueSEUsedOnlineSize: ${GLOBAL_USED_SIZE_GB}

EOF
  #==========================================================

  #==========================================================
  # Create GlueSA entries

  for SA in ${STORM_STORAGEAREA_LIST}; do

    # Convert case
    SA_UPP=`echo ${SA} | tr '[:lower:]' '[:upper:]'`
    SA_LOW=`echo ${SA} | tr '[:upper:]' '[:lower:]'`

    # Remove DNS-like characters from SA_UPP names
    SA_UPP=`echo ${SA_UPP} | sed -e 's/-//g' -e 's/\.//g'`

    x=STORM_${SA_UPP}_ROOT;            ROOT=${!x:-${STORM_DEFAULT_ROOT}/${SA_LOW}}
    x=STORM_${SA_UPP}_VONAME;          VONAME=${!x:-${SA_LOW}}
    x=STORM_${SA_UPP}_QUOTA;           QUOTA=${!x}
    x=STORM_${SA_UPP}_QUOTA_FILESET;   FILESET=${!x}
    x=STORM_${SA_UPP}_QUOTA_DEVICE;    DEVICE=${!x}
    x=STORM_${SA_UPP}_STORAGECLASS;    STORAGECLASS=${!x}

    # Check the STORAGECLASS
    if ! [ -z "${STORAGECLASS}" ]; then
      RET_POLICY_ACCESS_LATENCY="custodial:online"
    else
      RET_POLICY_ACCESS_LATENCY="replica:online"
    fi

    cat >> ${FILE} << EOF
#
# GlueSALocalID ${SA_LOW}:${RET_POLICY_ACCESS_LATENCY} SA (${VONAME} VO)
#
dn: GlueSALocalID=${SA_LOW}:${RET_POLICY_ACCESS_LATENCY},GlueSEUniqueID=${STORM_FRONTEND_PUBLIC_HOST},mds-vo-name=resource,o=grid
GlueSATotalOnlineSize: `hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`
GlueSAUsedOnlineSize: `hash_find SA_USED_SIZE_GB ${SA_UPP}`
GlueSAFreeOnlineSize: `hash_find SA_FREE_SIZE_GB ${SA_UPP}`
GlueSAReservedOnlineSize: `hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`
GlueSACapability: InstalledOnlineCapacity=`hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`
GlueSAStateAvailableSpace: `hash_find SA_FREE_SIZE_KB ${SA_UPP}`
GlueSAStateUsedSpace: `hash_find SA_USED_SIZE_KB ${SA_UPP}`

EOF

  done

  for PERVO_VONAME in ${PERVO_VONAMES}; do
    PERVO_VONAME_INDEX=`echo ${PERVO_VONAME} | sed 's/\.//g'`
    cat >> ${FILE} << EOF
#
# GlueSALocalID ${PERVO_VONAME}
#
dn: GlueSALocalID=${PERVO_VONAME},GlueSEUniqueID=${STORM_FRONTEND_PUBLIC_HOST},mds-vo-name=resource,o=grid
GlueSATotalOnlineSize: `hash_find PERVO_TOTAL_SIZE_GB ${PERVO_VONAME_INDEX}`
GlueSAUsedOnlineSize: `hash_find PERVO_USED_SIZE_GB ${PERVO_VONAME_INDEX}`
GlueSAFreeOnlineSize: `hash_find PERVO_FREE_SIZE_GB ${PERVO_VONAME_INDEX}`
GlueSAStateAvailableSpace: `hash_find PERVO_FREE_SIZE_KB ${PERVO_VONAME_INDEX}`
GlueSAStateUsedSpace: `hash_find PERVO_USED_SIZE_KB ${PERVO_VONAME_INDEX}`

EOF

  done
  #==========================================================

  # Print built file
  cat ${FILE}
  rm -f ${FILE}

  # Exit with success
  exit 0
