<?xml version="1.0" encoding="UTF-8"?>

<!--
This is the Ant buildfile for the StoRM BackEnd component.

Copyright (c) 2008 
  Magnoni Luca <luca.magnoni@cnaf.infn.it>, 
  Riccardo Zappi <riccardo.zappi@cnaf.infn.it> 

You may copy, modify and distribute this file according to the same
terms as the rest of the StoRM sources.

Buildfile targets
=================

Please use ``ant -projecthelp`` to see user-available targets with a
short description.

Other targets are defined here, but they are mostly used internally
and need not be visible to the end-user.

-->

<project basedir="." default="help" name="StoRM">
	<description>
     Ant buildfile for the StoRM BackEnd server.
  </description>


	<!-- =================================================================== -->
	<!-- PRINT USAGE INFORMATION                                             -->
	<!-- =================================================================== -->
	<target name="help"  description="short help text">
		<echo>
This is StoRM-BE version ${version}.

To run the JUnit tests, you _must_ start ant with -lib option!
ant -lib PATH_TO_JUNIT.JAR/junit.jar test

To compile the BE, run:
ant clean
ant build

If you then want to install the BE in /opt/storm/backend, run:
ant install

Please, use:

  ant -projecthelp

to get a list of the available targets for this buildfile.
	</echo>
	</target>

	<!-- =============================================================== -->
	<!-- SET ANT PROPERTIES                                              -->
	<!-- =============================================================== -->
	<!--                                                                 -->
	<!-- N.B.: once a property has been set, it will not be overwritten. -->
	<!-- Therefore, default values for properties go last, and user      -->
	<!-- overrides go first.                                             -->
	<!--                                                                 -->

	<!-- sets the standard DSTAMP, TSTAMP, and TODAY properties -->
	<tstamp/>


	<!-- load all properties from ``build.properties`` file -->
	<!-- TODO this is not used (is in todolist in file doc/to-dos-1.5.0.txt)-->
	<property file="build.properties"/>

	<!-- load environment vars under the env.* property hierarchy -->
	<property environment="env"/>

	<!-- set default global properties for this build -->
	<property name="basedir" location="."/>

	<!-- variable used by make -->
	<property name="swig.location" value="/usr" />
	<property name="glite.location" value="/opt/glite" />
	<property name="lcmaps.location" value="${glite.location}" />
	<property name="lcmaps-without-gsi.location" value="/usr" />
	<property name="lcmaps-plugins-basic.location" value="${glite.location}" />
	<property name="lcmaps-plugins-voms.location" value="${glite.location}" />
	<property name="jdk.location" value="/usr/lib/jvm/java" />
	<property name="libacl-devel.location" value="/usr" />
	<property name="libattr-devel.location" value="/usr" />
	<property name="gpfs-base.location" value="/usr/lpp/mmfs" />

	<!-- sources used to build and make the distribution archives -->
	<property name="src.dir" location="${basedir}" />
	<property name="src.doc.dir" location="${src.dir}/doc" />
	<property name="src.java.dir" location="${src.dir}/src" />
	<property name="src.jars.dir" location="${src.dir}/lib" />
	<property name="src.config.dir" location="${src.dir}/etc" />
	<property name="src.config.dir.db" location="${src.dir}/etc/db" />
	<property name="src.sysvinit.dir" location="${src.dir}/etc/init.d" />
	<property name="src.logrotate.dir" location="${src.dir}/etc/logrotate.d" />
	<property name="src.sysconfig.dir" location="${src.dir}/etc/sysconfig" />
	<property name="src.cron.dir" location="${src.dir}/etc/cron.d" />
	<property name="info.dir" location="${src.dir}/info-provider" />

	<property name="build.encoding" value="ISO-8859-1" />

	<property name="javac.debug" value="on" />
	<property name="javac.optimize" value="on" />
	<property name="javac.deprecation" value="off" />
	<property name="javac.version" value="1.6" />
	<property name="javac.args" value="" />
	<property name="javac.args.warnings" value="-Xlint:none" />

	<property name="build.dir" location="${basedir}/build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.libs.dir" location="${build.dir}/lib" />
	<property name="build.obj.dir" location="${build.dir}/obj" />
	<property name="build.debug" value="false" />
	<property name="build.gpfs" value="true" />
	<property name="build.lustre" value="false" />
	<!-- ####  COMMENTED TO BE COMPATIBLE WITH ETICS 
	<antversion property="ant.version_1.8" atleast="1.8"/>
	-->
	<property name="build.scripts.dir" value="${src.config.dir}"/>
	<property name="version.info.dir" value="${src.java.dir}/it/grid/storm"/>
	<property name="version.info.file" value="VERSION"/>
	<!-- names, used as path element -->
	<property name="service.prefix" value="storm" />
	<property name="module.name" value="backend-server"/>
	<property name="component.name" value="${service.prefix}-${module.name}"/>
	<property name="dist.name" value="${component.name}"/>
	
    <exec executable="uname" outputproperty="architecture" >
    	<arg value="-m"/>
    </exec>
	<condition property="arch_bit" value="64" else="">
		<equals arg1="x86_64" arg2="${architecture}" trim="true" />
	</condition>
	
	<!-- default value for platform.acronym -->
	<property name="platform.acronym" value="sl5" />
	
	<available file="${version.info.dir}/${version.info.file}" property="version.file.exists"/>

	<!-- these names are chosen to match configure/Makefile common usage -->
	
	<!-- default value for prefix -->
	<property name="prefix" location="${basedir}/install"/>
	
	<!-- installation roots -->
	<property name="sysconfdir" location="${prefix}/etc"/>
	<property name="datadir" location="${prefix}/usr/share"/>
	<property name="varlog" location="${prefix}/var/log"/>
	<property name="vartmp" location="${prefix}/var/tmp"/>
	
	<!-- first level derivate paths -->
	<property name="logdir" location="${varlog}/${service.prefix}"/>
	<!-- <property name="tmpdir" location="${vartmp}/${component.name}"/> -->
	
	<!-- configuration directories -->
	<property name="confdir" location="${sysconfdir}/${service.prefix}/${module.name}"/>
    <property name="confdb" location="${confdir}/db"/>
	<property name="sysvinitdir" location="${sysconfdir}/init.d"/>
	<property name="logrotatedir" location="${sysconfdir}/logrotate.d"/>
	<property name="crondir" location="${sysconfdir}/cron.d"/>
	<property name="sysconfigdir" location="${sysconfdir}/sysconfig"/>

	<property name="docdir" location="${datadir}/doc/${dist.name}-${version}"/>
	<property name="libdir" location="${prefix}/usr/lib${arch_bit}"/>
	<property name="nativedir" location="${libdir}/${component.name}"/>
	<property name="javadir" location="${datadir}/java/${component.name}"/>

	<property name="dist.jar" value="storm-backend-server.jar"/>
		
	<!-- rpm building properties -->
	<property name="rpm.scripts.dir" location="${basedir}/rpm"/>
	<property name="rpm.scripts.rpm-builder" location="${rpm.scripts.dir}/build-be-rpm"/>
	<property name="rpm.spec.file" location="${rpm.scripts.dir}/storm-backend-server.spec"/>
    <property name="rpm.spec.file-tpl" location="${rpm.scripts.dir}/storm-backend-server.spec.tpl"/>
	<property name="rpm.dest.dir" location="${basedir}/rpm-build"/>
	<property name="rpm.util.jar" location="${build.dir}/${dist.jar}"/>

	<!-- the output file names -->

	<property name="dist.src.tarfile" value="${basedir}/${dist.name}-${version}.tar"/>
	<property name="dist.src.gzipfile" value="${dist.src.tarfile}.gz"/>

	<target name="build.dist.bin.properties"
		description="Produces the properties containing the name of the produced binary tar and tar.gz files">
        <exec executable="/usr/bin/java" outputproperty="distribution" >
                   <arg value="-cp"/>
                   <arg value="${rpm.util.jar}"/>
                   <arg value="-Xmx32m"/>
                   <arg value="it/grid.storm/Platform"/>
                   <arg value="os_dist"/>
           </exec>

           <exec executable="sed" inputstring="${distribution}" outputproperty="nonspace.distribution">
                   <arg value="s/ /_/g"/>
           </exec>
           <echo message="distribution=${nonspace.distribution}" />


           <exec executable="sed" inputstring="${architecture}" outputproperty="nonspace.architecture">
                   <arg value="s/ /_/g"/>
           </exec>
           <echo message="architecture=${nonspace.architecture}" />

		<property name="dist.bin.tarfile" value="${basedir}/${dist.name}-${version}-${age}.${nonspace.distribution}.${nonspace.architecture}.tar"/>
		<property name="dist.bin.gzipfile" value="${dist.bin.tarfile}.gz"/>
	</target>
		
	<!-- where unit test files are located -->
	<property name="test.junit.dir" value="${src.dir}/test"/>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Print properties                                                -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!--                                                                 -->

	<target name="help.properties"
	description="Print values of customizable properties">
		<echo>
This is StoRM-BE, version ${version}
------------------------------------------------

All properties may be overridden with the
``build.properties`` file or ant's ``-D`` command-line
switch, as usual.


basedir=${basedir}
  The mother of all paths


src.dir=${src.dir}
  Root of the source tree; the properties below name
  its different parts

src.doc.dir=${src.doc.dir}
  Root for the documentation in the source tree

src.java.dir=${src.java.dir}
  Root for the Java source files

src.jars.dir=${src.jars.dir}
  All .jar files in this directory are inserted in the
  compilation CLASSPATH and copied to the installation tree

src.config.dir=${src.config.dir}
  Example configuration files; copied verbatim to the
  installation tree

src.sysvinit.dir=${src.sysvinit.dir}
  Start/stop scripts; copied verbatim to the the
  installation tree


build.dir=${build.dir}
  Root to the build tree; binary files are created here

build.classes.dir=${build.classes.dir}
  Root to the compiled Java classes

build.libs.dir=${build.libs.dir}
  Directory where native code (C/C++) libraries are created

build.obj.dir=${build.obj.dir}
  Directory where object C/C++ files are created

build.compiler=${build.compiler}
  If set, ant will use this Java compiler; see Ant
  documentation

build.debug=${build.debug}
  If true, then build debugging code too

build.gpfs=${build.gpfs}
  If true, then build GPFS support code in the filesystem
  wrapper

build.lustre=${build.lustre}
  If true, then build Lustre support code in the filesystem
  wrapper


prefix=${prefix}
  Root path for making all the following directory paths;
  they may be individually set, but all default to a
  standardly-named subdirectory of ``prefix``.

bindir=${bindir}
  Location of user executable scripts and binaries.

datadir=${datadir}
  Location of architecture-independent files.

docdir=${docdir}
  Location of miscellaneous program documentation.

jardir=${jardir}
  Location of 3rd party .jar files needed at runtime.

nativedir=${nativedir}
  Location of architecture-dependent non-executable program
  files.

localstatedir=${localstatedir}
  Root path for ``logdir`` and ``tmpdir``, if those are not
  set independently

logdir=${logdir}
  Created by ``install`` target; where will the StoRM
  logfiles reside.

sbindir=${sbindir}
  Location of sysadmin executable scripts and binaries

sysconfdir=${sysconfdir}
  Location of program config files.

sysvinitdir=${sysvinitdir}
  Location of sysvinit start/stop scripts

tmpdir=${tmpdir}
  Created by ``install`` target; where will the StoRM
  temporary files reside.


dist.jar=${dist.jar}
  The name of the created .jar file with StoRM code

dist.tarfile=${dist.tarfile}
  The name of the created .tar file containing source code.
  The tarfile should contain whatever is needed to rebuild
  StoRM from the sources on another machine.


test.junit.dir
  Path to the directory containing the jUnit TestCase source files.
	</echo>
	</target>


	<!-- ============================================================== -->
	<!-- FILE SET -->
	<!-- ============================================================== -->
	<!--
    Please include here any file/path set that is referenced later on
    in the buildfile.

    Currently defined filesets are:

      src.config
        Configuration files used by the StoRM server at runtime

      src.jars
        Jars referenced in the StoRM source; used at compile time,
        and also copied to installation directory for runtime.

      src.libs
        StoRM BE native code libraries; built from sources in the
        StoRM BE tree, and needed at runtime

      src.sysvinit
        StoRM BE start/stop scripts

  -->

	<!-- classpath used when building the sources -->
	<path id="build.classpath">
		<pathelement path="${classpath}"/>
		<!--<pathelement path="${env.CLASSPATH}"/>-->
		<fileset refid="src.jars.dist"/>
		<fileset refid="src.jars.build"/>
		<pathelement path="${src.java.dir}"/>
	</path>

	<fileset id="src.jars.dist" dir="${src.jars.dir}">
		<include name="activation.jar"/>
		<include name="axis.jar"/>
		<include name="axis-schema.jar"/>
		<include name="srm22client.jar"/>

		<include name="cog-axis.jar"/>
		<include name="cog-jglobus.jar"/>
		<include name="cog-jobmanager.jar"/>
		<include name="cog-url.jar"/>

		<include name="log4j-1.2.13.jar"/>

		<include name="commons-beanutils.jar"/>
		<include name="commons-cli-1.0.jar"/>
		<include name="commons-codec-1.3.jar"/>
		<include name="commons-collections-3.1.jar"/>
		<include name="commons-configuration-1.4.jar"/>
		<include name="commons-dbcp-1.2.1.jar"/>
		<!-- used by Persistence Component -->
		<include name="commons-digester-1.7.jar"/>
		<include name="commons-discovery-0.2.jar"/>
		<include name="commons-lang-2.3.jar"/>
		<include name="commons-pool-1.2.jar"/>
		<!-- used by Persistence Component -->
		<include name="commons-validator-1.3.0.jar"/>
		<!-- needed for SURL validation -->
		<include name="commons-logging-1.1.jar"/>

		<!-- needed for Apache ConfigurationReader -->
		<include name="cryptix32.jar"/>
		<include name="cryptix-asn1.jar"/>

		<include name="dom.jar"/>

		<include name="jakarta-oro-2.0.8.jar"/>
		<!-- needed for SURL validation -->
		<include name="jaxrpc.jar"/>
		<include name="jce-jdk13-131.jar"/>
		<include name="jgss.jar"/>

		<include name="mail.jar"/>

		<include name="odmg-3.0.jar"/>
		<include name="puretls.jar"/>
		<include name="saaj.jar"/>
		<include name="wsdl4j-1.5.1.jar"/>
		<include name="xalan.jar"/>
		<include name="xercesImpl.jar"/>
		<!-- PART of xerces 2.8.0 -->
		<include name="xml-apis.jar"/>
		<!-- PART of xerces 2.8.0 -->
		<include name="xmlrpc-server-3.0.jar"/>
		<!-- PART of XML-RPC 3.0 -->
		<include name="xmlrpc-common-3.0.jar"/>
		<!-- PART of XML-RPC 3.0 -->
		<include name="ws-commons-util-1.0.1.jar"/>

		<include name="logback-classic-0.9.15.jar"/>
		<!-- New LOGGING system -->
		<include name="logback-core-0.9.15.jar"/>
		<!-- New LOGGING system -->
		<include name="slf4j-api-1.5.6.jar"/>
		<!-- New LOGGING system -->

		<include name="jna.jar"/>
		<!-- DMAPI -->

		<include name="asm-3.1.jar"/>
		<!-- JERSEY and GRIZZLY for REST Service -->
		<include name="grizzly-webserver-1.9.15b.jar"/>
		<!-- JERSEY and GRIZZLY for REST Service -->
		<include name="jersey-core-1.1.0-ea.jar"/>
		<!-- JERSEY and GRIZZLY for REST Service -->
		<include name="jersey-server-1.1.0-ea.jar"/>
		<!-- JERSEY and GRIZZLY for REST Service -->
		<include name="jsr311-api-1.1.jar"/>
		<!-- JERSEY and GRIZZLY for REST Service -->
		<include name="json-20080701.jar"/>
		
		<!-- JSON results for InfoService REST Service -->
		<include name="jettison-1.1.jar"/>
		<include name="stax-api-1.0-2.jar"/>
		
		<!-- Background DU -->
		<include name="commons-io-2.0.1.jar"/>
		
		<!-- Parsing INI files -->
		<include name="ini4j-0.5.2.jar"/>
		
	</fileset>

	<fileset id="src.jars.build"
     dir="${src.jars.dir}">
		<include name="mysql-connector-java-5.1.13-bin.jar"/>
	</fileset>

	<!-- native code libs; needed at runtime -->
	<fileset id="src.lib"
     dir="${build.libs.dir}">
		<include name="*.so"/>
		<exclude name="libgpfs.so"/>
	</fileset>

	<!-- config input files; needed at runtime -->
	<fileset id="src.config"
     dir="${src.config.dir}">
		<include name="namespace.xml"/>
		<include name="namespace-1.5.0.xsd"/>
		<include name="lcmaps.db"/>
		<include name="logging.xml"/>
		<include name="storm.properties.template"/>
		<include name="used-space.ini.template"/>
		<include name="path-authz.db"/>
		<include name="welcome.txt"/>
		<!-- removed because are not storm input file but, respectively cron and logrotate (they will be installed not in a storm created directory)-->
		<!-- <include name="cron.d/storm-backend-server.cron"/>
		<include name="logrotate.d/storm-backend-server"/> -->
	</fileset>

	<!-- configuration script for DB -->
	<fileset id="src.config.db"
	   dir="${src.config.dir.db}">
		<!-- for MySQL database creation-->
		<include name="storm_database_config.sh" />
		<include name="storm_mysql_tbl.sql" />
		<include name="storm_mysql_grant.sql" />
		<include name="storm_be_ISAM_mysql_update_from_1.0.0_to_1.1.0.sql" />
	</fileset>

	<!-- start/stop scripts -->
	<fileset id="src.sysvinit" dir="${src.sysvinit.dir}">
		<include name="storm-backend-server" />
	</fileset>

	<!-- logrotate scripts -->
	<fileset id="src.logrotate" dir="${src.logrotate.dir}">
		<include name="storm-backend-server" />
	</fileset>

	<!-- cron scripts -->
	<fileset id="src.cron" dir="${src.cron.dir}">
		<include name="storm-backend-server.cron" />
	</fileset>

	<!-- start/stop scripts -->
	<fileset id="src.sysconfig" dir="${src.sysconfig.dir}">
		<include name="storm-backend-server" />
	</fileset>

	<!-- documentation and licenses -->
	<fileset id="src.docs.credits" dir="${src.dir}" >
	   <include name="CREDITS"/>
	   <include name="ACKNOWLEDGEMENTS.txt"/>
	</fileset>
        
	<fileset id="src.docs.release-note"
			dir="${src.dir}"
			includes="RELEASE-NOTES.txt"/>
	<fileset id="src.docs.license"
		dir="${src.dir}"
		includes="LICENSE.txt"/>
	<fileset id="src.docs.3rdparty.licenses"
		dir="${src.dir}">
		
		<include name="lib/*.LICENSE"/>
	</fileset>

	<!-- junit ant task support -->
	<path id="test.classpath">
		<pathelement location="${src.jars.dir}/junit.jar"/>
		<pathelement location="${test.junit.dir}"/>
		<path refid="build.classpath"/>
	</path>


	<!-- =============================================================== -->
	<!-- BUILD/COMPILE TARGETS                                           -->
	<!-- =============================================================== -->

	<!-- Prepare directories and properties for compile/build tasks to run -->
	<target name="init">
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<mkdir dir="${build.libs.dir}"/>
		<mkdir dir="${build.obj.dir}"/>
	</target>

	
	<!-- make MOCK GPFS shared libray -->
	<target name="mock-gpfs" depends="init">

		<exec executable="make"
			failonerror="true"
			logError="true">
			<arg line="-C ${src.java.dir}/it/grid/storm/filesystem/mock"/>
			<arg value="DESTDIR=${build.libs.dir}"/>
			<arg value="BUILDDIR=${build.obj.dir}"/>
			<arg value="arch=${arch_bit}"/>
		</exec>
	</target>	

	
	<!-- make c libs used by JNA -->
	<target name="clibs-jna" depends="init">

		<echo message="- DESTDIR : ${build.libs.dir}"/>
		<echo message="- BUILDDIR : ${build.obj.dir}"/>
		<echo message="- arch : ${arch_bit}"/>
		<echo message="- lcmaps-without-gsi.location : ${lcmaps-without-gsi.location}"/>
		
		<exec executable="make"
			failonerror="true"
			logError="true">
			<arg line="-C ${src.java.dir}/it/grid/storm/jna"/>
			<arg value="DESTDIR=${build.libs.dir}"/>
			<arg value="BUILDDIR=${build.obj.dir}"/>
			<arg value="arch=${arch_bit}"/>
			<arg value="lcmaps-without-gsi.location=${lcmaps-without-gsi.location}"/>
		</exec>
	</target>


	<!-- make SWIG Java interfaces -->
	<target name="swig"
		depends="swig.filesystem"/>


	<!--
	  ###  Make FILESYSTEM Wrapping with SWIG ### 
	-->
	<target name="swig.filesystem" depends="init">

        <echo message="- Source Java Dir: ${src.java.dir}"/>
		<echo message="- Build dir: ${build.libs.dir}"/>
        <echo message="- Architecture: ${arch_bit}"/>
        <echo message="- Swig location: ${swig.location}"/>
        <echo message="- JDK location: ${jdk.location}"/>
        <echo message="- Lib ACL location: ${libacl-devel.location}"/>
        <echo message="- Lib ATTR location: ${libattr-devel.location}"/>
        <echo message="- Lib GPFS location: ${gpfs-base.location}"/>

		<exec executable="make" failonerror="true" logError="true">
			<arg line="-C ${src.java.dir}/it/grid/storm/filesystem/swig swig"/>
			<arg line="fs_acl.java genericfs.java"/>
			<arg value="DESTDIR=${build.libs.dir}" />
			<arg value="arch=${arch_bit}"/>
			<arg value="swig_location=${swig.location}" />
			<arg value="jdk_location=${jdk.location}" />
			<arg value="libacl_devel_location=${libacl-devel.location}" />
			<arg value="libattr_devel_location=${libattr-devel.location}" />
			<arg value="gpfs_base_location=${gpfs-base.location}" />
		</exec>
	</target>


	<!-- Filestem classes -->
	<target name="libs.filesystem" 
		depends="init,swig.filesystem">

		<echo message="Java installation directory: ${java.home}"/>
		<echo message="Java Virtual Machine specification version: ${java.vm.specification.version}"/>
		<echo message="Java Virtual Machine specification vendor: ${java.vm.specification.vendor}"/>
		<echo message="Java Virtual Machine specification name: ${java.vm.specification.name}"/>
		<echo message="Java Virtual Machine implementation version: ${java.vm.version}"/>

		<exec executable="make" failonerror="true" logError="true">
			<arg line="-C ${src.java.dir}/it/grid/storm/filesystem/swig libso"/>
			<arg value="DESTDIR=${build.libs.dir}" />
			<arg value="arch=${arch_bit}"/>
			<arg value="swig_location=${swig.location}" />
			<arg value="jdk_location=${jdk.location}" />
			<arg value="libacl_devel_location=${libacl-devel.location}" />
			<arg value="libattr_devel_location=${libattr-devel.location}" />
			<arg value="gpfs_base_location=${gpfs-base.location}" />
		</exec>
	</target>

	<target name="libs"
	description="compile native code libs"
	depends="mock-gpfs, libs.filesystem, clibs-jna"/>

	<target name="precompile"  depends="init,swig"/>

	<!-- compile the .java source files -->
	<target name="javac"  description="Compile the .java source files"  depends="precompile">
		<javac 
			encoding="${build.encoding}" 
			srcdir="${src.java.dir}"
			includes="it/grid/storm/**/*.java"
			destdir="${build.classes.dir}"
		    debug="${javac.debug}"
			optimize="${javac.optimize}"
			target="${javac.version}"
			source="${javac.version}"
			deprecation="${javac.deprecation}"
            includeantruntime="false">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath>
				<path refid="build.classpath"/>
			</classpath>
		</javac>
	</target>

	<!-- 'compile' is an alias for 'javac' -->
	<target name="compile" depends="javac"/>

	<target name="build"  
		description="Compile *all* StoRM BE code"
		depends="libs,javac,storm-backend-server.jar"/>


	<target name="create-default-Version-Info" unless="version.file.exists" 
		description="Create the default Version Info, if needed.">
		<echo message="NOTE: File VERSION doesn't exist. A default-one will be created."/>
		<echo message="## ANT version is :'${ant.version}'"/>
		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<chmod file="${build.scripts.dir}/svnRevision.sh" perm="ugo+rx"/>
		<exec dir="${basedir}" executable="${build.scripts.dir}/svnRevision.sh" failonerror="false" logerror="true" outputproperty="svn.revision.number" />
		<echo message="## SVN Revision Number ${svn.revision.number}" />
		<echo file="${version.info.dir}/${version.info.file}" append="false">#Build Information File - It contains information about the version number defined at building time !!!${line.separator}#DO NOT CHANGE !!!.${line.separator}</echo>
		<echo file="${version.info.dir}/${version.info.file}" append="true">VERSION=${version}${line.separator}</echo>
		<echo file="${version.info.dir}/${version.info.file}" append="true">RELEASE=${age}${line.separator}</echo>
		<echo file="${version.info.dir}/${version.info.file}" append="true">svn.revision.number=${svn.revision.number}${line.separator}</echo>
		<echo file="${version.info.dir}/${version.info.file}" append="true">build.date=${TODAY}${line.separator}</echo>
		<echo file="${version.info.dir}/${version.info.file}" append="true">build.num=N/A [ ant.version = ${ant.version} ]${line.separator}</echo>
	</target>

	<target name="make-version-info" unless="version.file.exists">
		<input message="Insert VERSION (major.minor.update): " addproperty="version" />
		<input message="Insert AGE : " addproperty="age" />
		<antcall target="create-default-Version-Info"/>
	</target>

	<!-- Task useful to retrieve the version of ANT without the task antversion -->
	<target name="ant-minor-version">
		<exec executable="awk" inputstring="${ant.version}" outputproperty="ant.version.number">
			<arg line="'{print $4}'" />
		</exec>
		<echo message="v-num=${ant.version.number}" />
		<exec executable="awk" inputstring="${ant.version.number}" outputproperty="version.minor">
			<arg line="'{split($0,a,&quot;.&quot;); print a[2];}'" />
		</exec>
		<echo message="minor=${version.minor}" />
	</target>

	<target name="storm-backend-server.jar" description="Make the ${dist.jar} file out of compiled Java classes" depends="javac, make-version-info">
		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<antcall target="make-version-info"/>
		<jar destfile="${build.dir}/${dist.jar}">
			<manifest>
				<attribute name="Implementation-Title" value="StoRM-Backend-Server"/>
				<attribute name="Built-Date" value="${TODAY}"/>
				<attribute name="Implementation-Version" value="${version}-${age}"/>
				<attribute name="Implementation-Vendor" value="INFN"/>
			</manifest>
			<fileset dir="${build.classes.dir}">
				<include name="it/grid/storm/**" />
			</fileset>
			<fileset dir="${src.java.dir}">
				<filename name="it/grid/storm/VERSION" />
			</fileset>
		</jar>
	</target>

	<!-- =============================================================== -->
	<!-- CLEAN                                                           -->
	<!-- =============================================================== -->

	<!-- Invoke 'clean' target on it/grid/storm/filesystem/mock/Makefile -->
	<target name="clean.mock-gpfs">
		<exec executable="make" dir="${src.java.dir}/it/grid/storm/filesystem/mock" logError="true">
			<arg value="DESTDIR=${build.libs.dir}"/>
			<arg value="clean"/>
		</exec>
	</target>	
	
	
	<!-- Invoke 'clean' target on it/grid/storm/jna/Makefile -->
	<target name="clean.clibs-jna">
		<exec executable="make" dir="${src.java.dir}/it/grid/storm/jna" logError="true">
			<arg value="DESTDIR=${build.libs.dir}"/>
			<arg value="BUILDDIR=${build.obj.dir}"/>
			<arg value="clean"/>
		</exec>
	</target>

	<!-- Invoke 'clean' target on it/grid/storm/wrapper Makefile -->
	<target name="clean.libs.wrapper">
		<exec executable="make"
    	dir="${src.java.dir}/it/grid/storm/wrapper"
        logError="true">
			<arg value="BUILDDIR=${build.libs.dir}"/>
			<arg value="clean"/>
		</exec>
	</target>

	<!-- Invoke 'clean' target on it/grid/storm/grid/swig/Makefile -->
	<target name="clean.swig.griduser">
		<exec executable="make"
    	dir="${src.java.dir}/it/grid/storm/griduser/swig"
        logError="true">
			<arg value="DESTDIR=${build.libs.dir}"/>
			<arg value="extraclean"/>
		</exec>
	</target>

	<!-- Invoke 'clean' target on it/grid/storm/filesystem/swig/Makefile -->
	<target name="clean.swig.filesystem">
		<exec executable="make"
    	dir="${src.java.dir}/it/grid/storm/filesystem/swig"
        logError="true">
			<arg value="DESTDIR=${build.libs.dir}"/>
			<arg value="extraclean"/>
		</exec>
	</target>

	<target name="clean"
	description="Remove build tree and all of the intermediate build files"
	depends="clean.libs.wrapper,clean.swig.griduser,clean.swig.filesystem,clean.clibs-jna, clean.mock-gpfs">
		<!-- Delete the ${build.dir} directory tree -->
		<delete dir="${build.dir}" verbose="false"/>
		<delete dir="${prefix}" verbose="false"/>
		<delete file="${src.config.dir}/lcmaps.db" verbose="true" />
		<delete file="${dist.src.tarfile}" verbose="true"/>
		<delete file="${dist.src.gzipfile}" verbose="true"/>
		<delete file="${dist.bin.tarfile}" verbose="true"/>
		<delete file="${dist.bin.gzipfile}" verbose="true"/>
		<delete dir="${rpm.dest.dir}" verbose="false"/>
		<delete file="${version.info.dir}/${version.info.file}" verbose="true"/>
	</target>



	<!-- =============================================================== -->
	<!-- INSTALL                                                         -->
	<!-- =============================================================== -->

	<target name="install"
	description="Copy built and distributed files to a deployable tree structure under ${prefix}"
	depends="install.nojars,install.jarsonly"/>


	<target name="replace-lcmaps.db"
	    description="create lcmaps.db with the version dependent by architecturt" >

		<condition property="lcmaps-substitute-file" 
			value="${src.config.dir}/lcmaps-x86_64.db" 
			else="${src.config.dir}/lcmaps-i386.db">
			<equals arg1="x86_64" arg2="${architecture}" trim="true" />
		</condition>

		<copy 
			file="${lcmaps-substitute-file}" 
			tofile="${src.config.dir}/lcmaps.db"
			overwrite="true" />
	</target>

	
	<target name="install.nojars" 
		description="Copy built files (except 3rd-party .jar's) to a deployable tree structure under ${prefix}" 
		depends="replace-lcmaps.db, build">

		<!-- Create the distribution directory hierarchy -->
		<mkdir dir="${prefix}" />
		
		<mkdir dir="${datadir}" />
		<mkdir dir="${logdir}" />
		<!-- <mkdir dir="${tmpdir}" /> -->
		
		<mkdir dir="${confdb}" />
		<mkdir dir="${sysvinitdir}" />
		<mkdir dir="${logrotatedir}" />
		<mkdir dir="${crondir}" />
		<mkdir dir="${sysconfigdir}" />
			
		<mkdir dir="${docdir}" />
		<mkdir dir="${libdir}" />
		<mkdir dir="${nativedir}" />
		<mkdir dir="${javadir}" />
	
		<!-- copy files -->
		<copy
		  file="${build.dir}/${dist.jar}"
		  tofile="${javadir}/storm-backend-server.jar"
		  overwrite="true"/>

		<copy
		  todir="${confdir}"
		  flatten="false"
		  overwrite="true">
          <fileset refid="src.config" />
		</copy>

		<copy
		  todir="${sysvinitdir}"
		  flatten="true"
		  overwrite="true">
			<fileset refid="src.sysvinit" />
		</copy>
		<copy
		   todir="${logrotatedir}"
		  flatten="true"
		  overwrite="true">
			<fileset refid="src.logrotate" />
		</copy>
		<copy
		  todir="${crondir}"
		  flatten="true"
		  overwrite="true">
			<fileset refid="src.cron" />
		</copy>
		<copy
		  todir="${sysconfigdir}"
		  flatten="true"
		  overwrite="true">
			<fileset refid="src.sysconfig" />
		</copy>
		<copy
		  todir="${nativedir}"
		  flatten="true"
		  overwrite="true">
			<fileset refid="src.lib" />
		</copy>
		<copy
		  todir="${docdir}"
		  overwrite="true">
			<fileset refid="src.docs.credits" />
			<fileset refid="src.docs.release-note" />
			<fileset refid="src.docs.license" />
		</copy>
		<copy todir="${confdb}" overwrite="true">
			<fileset refid="src.config.db" />
		</copy>

		<!-- fix permissions -->
		<!-- <chmod perm="0755" type="dir"> -->
			<!-- this is necessary if umask != 022 -->
		<!--	<dirset id="dist.dirs" dir="${prefix}/" /> -->
		<!-- </chmod> -->
		<!-- <chmod perm="0644" type="file"> -->
			<!-- this is necessary if umask != 022 -->
		<!--	<fileset id="dist.files" dir="${prefix}/" /> -->
		<!-- </chmod> -->
		<!-- <chmod perm="0755" type="file"> -->
		<!--	<fileset id="dist.bin" dir="${prefix}"> -->
				<!-- set executable bit for binaries and scripts -->
		<!-- 		<include name="etc/init.d/*" /> -->
		<!-- </fileset> -->
		<!-- </chmod> -->
		<!-- <chmod perm="1755" type="dir" dir="${tmpdir}" /> -->
	</target>


	<target name="install.jarsonly" description="Copy 3rd-party jar files to directory ${jardir}">

		<!-- Create the distribution directory hierarchy -->
		<mkdir dir="${docdir}" />
		<mkdir dir="${javadir}" />
		<mkdir dir="${javadir}/doc" />
		
		<!-- copy files -->
		<copy
		  todir="${javadir}"
		  flatten="true"
		  overwrite="true">
			<fileset refid="src.jars.dist" />
		</copy>
		<copy
		  todir="${javadir}/doc"
		  flatten="true"
		  overwrite="true">
			<fileset refid="src.docs.3rdparty.licenses" />
		</copy>
	</target>



	<!-- =============================================================== -->
	<!-- TARBALL                                                         -->
	<!-- =============================================================== -->

	<target name="tar.src" description="Roll a tarball of the checked-out sources" depends="build" >
		<delete file="${dist.src.tarfile}"/>
		<delete file="${dist.src.gzipfile}" />
		<tar destfile="${dist.src.tarfile}" compression="none" longfile="gnu">
			<!-- main source tree -->
			<tarfileset dir="${src.dir}" username="storm" group="storm" mode="0644" prefix="${dist.name}/">
				<!-- NOTE: each time a file/folder is specified in an "include" tag automatically all other files/folders in the same 
										   directory are excluded -->
				<include name="LICENSE.txt" />
				<include name="CREDITS" />
				<include name="RELEASE-NOTES.txt" />
				<include name="ACKNOWLEDGEMENTS.txt" />
				<include name="build.xml" />
				<include name="etc/" />
				<exclude name="etc/storm_test.properties" />
				<exclude name="etc/adminserver-config.xml" />
				<exclude name="etc/adminserver-log.properties" />
				<exclude name="etc/namespace_*.xml" />
				<exclude name="etc/namespace-*.xml" />
				<exclude name="etc/namespace-1.3.16.xsd" />
				<exclude name="etc/namespace-1.3.18.xsd" />
				<exclude name="etc/namespace-1.3.19.xsd" />
				<exclude name="etc/namespace-1.4.0.xsd" />
				<exclude name="etc/storm-properties.all-keys.txt" />
				<exclude name="etc/sa1-lhcb.authz" />
				<exclude name="etc/db/storm_mysql_update_from_1.0.0_to_1.3.2000.sql" />
				<exclude name="etc/db/storm_mysql_update_from_1.3.2000_to_1.4.0.sql" />
				<exclude name="etc/db/storm_mysql_update_from_1.4.0_to_1.5.0.sql" />
				<exclude name="etc/db/storm_mysql_update_from_1.5.0_to_1.5.4.sql" />
				<exclude name="etc/db/storm_mysql_update_from_1.5.3_to_1.5.4.sql" />
				<exclude name="etc/db/recall-table.txt" />
				<include name="config/" />
				<include name="doc/header-copyright.txt" />
				<include name="doc/storm-code-formatter-1.6.xml" />
				<include name="lib/" />
                <exclude name="lib/apache2.LICENSE" />
				<include name="rpm/" />
				<include name="src/" />
				<exclude name="src/it/grid/storm/VERSION" />
				<exclude name="src/**/*.o" />
				<exclude name="src/**/*.so" />
				<include name="test/" />
			</tarfileset>
		</tar>
		<!-- FIXME: should check if filename ends in .gz and compress -->
		<gzip src="${dist.src.tarfile}" destfile="${dist.src.gzipfile}" />
		<delete file="${dist.src.tarfile}" verbose="true"/>
	</target>

	<target name="tar.bin" description="Roll a tarball of the builded files" depends="build, install, build.dist.bin.properties" >
		<delete file="${dist.bin.tarfile}"/>
		<delete file="${dist.bin.gzipfile}" />
		<tar basedir="${prefix}" destfile="${dist.bin.tarfile}" compression="none" longfile="gnu" />
		<!-- FIXME: should check if filename ends in .gz and compress -->
		<gzip src="${dist.bin.tarfile}" destfile="${dist.bin.gzipfile}" />
		<delete file="${dist.bin.tarfile}"/>
	</target>

	<!-- =============================================================== -->
	<!-- RPM BUILDING                                                    -->
	<!-- =============================================================== -->

        <target name="build-spec" description="Create the spec file">
	        <delete file="${rpm.spec.file}" quiet="true"/>
	        <copy file="${rpm.spec.file-tpl}" tofile="${rpm.spec.file}">
                        <filterchain>
                        <replacetokens>
                                <token key="version" value="${version}"/>
                                <token key="age" value="${age}"/>
	                        	<token key="os" value="${platform.acronym}"/>
                                <token key="swig" value="${swig.location}"/>
                                <token key="jdk" value="${jdk.location}"/>
                                <token key="lcmaps" value="${lcmaps.location}"/>
                                <token key="lcmaps_without_gsi" value="${lcmaps-without-gsi.location}"/>
                                <token key="lcmaps_plugins_basic" value="${lcmaps-plugins-basic.location}"/>
                                <token key="lcmaps_plugins_voms" value="${lcmaps-plugins-voms.location}"/>
                                <token key="libacl_devel" value="${libacl-devel.location}"/>
                                <token key="libattr_devel" value="${libattr-devel.location}"/>
                        </replacetokens>
                        </filterchain>
                </copy>
        </target>

	<target name="build-rpm" description="Create the rpm" depends="build, build-spec">

		<antcall target="make-version-info"/>

		<echo message="RPM script dir : '${rpm.scripts.dir}'" />
		<echo message="RPM script builder : '${rpm.scripts.rpm-builder}'" />
		<echo message="RPM spec file : '${rpm.spec.file}'" />
		<echo message="RPM source tar.gz : '${dist.src.gzipfile}'" />
		<echo message="RPM bin tar.gz : '${dist.bin.gzipfile}'" />
		<echo message="RPM dest dir : '${rpm.dest.dir}'" />
		<echo message="RPM util jar : '${rpm.util.jar}'" />
		<echo message="RPM version : '${version}'" />
		<echo message="RPM age : '${age}'" />

		<!-- <delete file="${rpm.source.tar.file}"/> -->
		<!-- <delete file="${rpm.source.gzip.file}"/> -->
		<antcall target="tar.src"/>
		
		<delete dir="${rpm.dest.dir}"/>
		<mkdir dir="${rpm.dest.dir}"/>

		<exec executable="sh" failonerror="true" logerror="true">
			<arg value="${rpm.scripts.rpm-builder}"/>
			<arg value="${rpm.spec.file}"/>
			<arg value="${dist.src.gzipfile}"/>
			<arg value="${rpm.dest.dir}"/>
		</exec>
	</target>



	<!-- =============================================================== -->
	<!-- UNIT TESTS                                                      -->
	<!-- =============================================================== -->

	<target name="test"
	description="Run unit tests"
	depends="test.junit"/>

	<target name="test.junit" depends="test.compile">
		<junit>
			<formatter type="brief" usefile="false" />
			<classpath refid="test.classpath"/>
			<batchtest>
				<fileset id="test.junit.files" dir="${test.junit.dir}" includes="**/Test*.class"/>
			</batchtest>
		</junit>
	</target>

	<target name="test.compile">
		<javac
      destdir="${test.junit.dir}"
      debug="true"
      deprecation="true"
      source="1.6"
      target="1.5"
      sourcepath="${src.java.dir}">
			<!-- Javac needs a *directory* as argument... -->
			<src path="${test.junit.dir}"/>
			<include name="**/Test*.java"/>
			<classpath refid="test.classpath"/>
		</javac>
	</target>

	<target name="test.clean">
		<delete>
			<fileset dir="${test.junit.dir}" includes="**/*.class" />
		</delete>
	</target>

</project>
