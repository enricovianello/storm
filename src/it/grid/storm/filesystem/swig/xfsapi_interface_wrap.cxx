/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}
#define SWIG_exception(code, msg) { SWIG_JavaException(jenv, code, msg); }


#include <stdexcept>


#include <string>


#include "fs_errors.hpp"


#include "xfs.hpp"


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jlong JNICALL Java_it_grid_storm_filesystem_swig_xfsapi_1interfaceJNI_new_1xfs(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    fs::xfs *result;
    
    (void)jenv;
    (void)jcls;
    if(!jarg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
    if (!arg1_pstr) return 0;
    std::string arg1_str(arg1_pstr);
    arg1 = &arg1_str;
    jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
    try {
        result = (fs::xfs *)new fs::xfs((std::string const &)*arg1);
    }
    catch(fs::wrong_filesystem_type &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ fs::wrong_filesystem_type exception thrown");
        return 0;
        
    }
    catch(fs::error &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ fs::error exception thrown");
        return 0;
        
    }
    
    *(fs::xfs **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_it_grid_storm_filesystem_swig_xfsapi_1interfaceJNI_xfs_1prealloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    fs::xfs *arg1 = (fs::xfs *) 0 ;
    std::string *arg2 = 0 ;
    alloc_size_t arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(fs::xfs **)&jarg1; 
    if(!jarg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
    if (!arg2_pstr) return ;
    std::string arg2_str(arg2_pstr);
    arg2 = &arg2_str;
    jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
    arg3 = (alloc_size_t)jarg3; 
    try {
        (arg1)->prealloc((std::string const &)*arg2,arg3);
    }
    catch(fs::error &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ fs::error exception thrown");
        return ;
        
    }
    
}


JNIEXPORT jlong JNICALL Java_it_grid_storm_filesystem_swig_xfsapi_1interfaceJNI_xfs_1new_1acl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    fs::xfs *arg1 = (fs::xfs *) 0 ;
    fs_acl *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(fs::xfs **)&jarg1; 
    try {
        result = (fs_acl *)((fs::xfs const *)arg1)->new_acl();
    }
    catch(fs::error &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ fs::error exception thrown");
        return 0;
        
    }
    
    *(fs_acl **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_it_grid_storm_filesystem_swig_xfsapi_1interfaceJNI_delete_1xfs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    fs::xfs *arg1 = (fs::xfs *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(fs::xfs **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_it_grid_storm_filesystem_swig_xfsapi_1interfaceJNI_SWIGxfsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(fs::posixfs **)&baseptr = *(fs::xfs **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

